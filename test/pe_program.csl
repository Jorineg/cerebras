param memcpy_params: comptime_struct;

// Matrix dimensions
param M: i16;
// ID of PE (0 is left, 1 is right)
param pe_id: i16;

// Colors
param send_color: color; // Color used to send/recv data between PEs

// Queue IDs
const send_color_oq = @get_output_queue(2);
const send_color_iq = @get_input_queue(2);

// Task ID used by a local task to unblock cmd stream
const exit_task_id: local_task_id = @get_local_task_id(9);


// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);


// 48 kB of global memory contain A, x, b, y
var x: [M]f16;
var y: [M]f16;

var receive_buffer: [M]f16;
var result: [M]f16;

// const x_src1_dsr = @get_dsr(dsr_src1, 5);

// DSDs for accessing y, receive_buffer
const x_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> x[i] });
const y_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> y[i] });
const result_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> result[i] });
const receive_buffer_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> receive_buffer[i] });

// ptrs to A, x, b, y will be advertised as symbols to host
var x_ptr: [*]f16 = &x;
var y_ptr: [*]f16 = &y;
var result_ptr: [*]f16 = &result;


fn elem_prod() void {
  for (@range(i16, 100)) |i| {
    @fmulh(result_dsd, x_dsd, y_dsd);
  }
  // @activate(exit_task_id);
}

fn send_right() void {
  const out_dsd = @get_dsd(fabout_dsd, .{
                    .fabric_color = send_color, .extent = M,
                    .output_queue = send_color_oq
                  });
  // After fmovs is done, activate exit_task to unblock cmd_stream
  @fmovh(out_dsd, y_dsd, .{ .async = true, .activate = exit_task_id });
}

fn recv_left() void {
  const in_dsd = @get_dsd(fabin_dsd, .{
                   .fabric_color = send_color, .extent = M,
                   .input_queue = send_color_iq
                 });
  // After fadds is done, activate exit_task to unblock cmd stream
  @fmovh(receive_buffer_dsd, in_dsd);
}

// Call gemv function and send/ receive partial result y
fn compute() void {
  if (pe_id == 0) {
    elem_prod();
    send_right();
  } else {
    // recv_left();
    @activate(exit_task_id);
  }
}

task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {

  // @load_to_dsr(x_src1_dsr, x_dsd);

  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    @initialize_queue(send_color_oq, .{ .color = send_color });
    @initialize_queue(send_color_iq, .{ .color = send_color });
  }
  @export_symbol(x_ptr, "x");
  @export_symbol(y_ptr, "y");
  @export_symbol(result_ptr, "result");
  @export_symbol(compute);
}