param memcpy_params: comptime_struct;

// Matrix dimensions
param M: i16;
param N_per_PE: i16;

// ID of PE (0 is left, 1 is right)
param pe_id: i16;

// Colors
param send_color: color; // Color used to send/recv data between PEs

// Queue IDs
const send_color_oq = @get_output_queue(2);
const send_color_iq = @get_input_queue(2);

// Task ID used by a local task to unblock cmd stream
const exit_task_id: local_task_id = @get_local_task_id(9);


// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);




// 48 kB of global memory contain A, x, b, y
var A: [M*N_per_PE]f16 linksection(".A"); // A is stored column major
var x: [N_per_PE]f16;
var y: [M]f16 linksection(".y");

// DSDs for accessing A, b, y
// A_dsd accesses column of A
// var A_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> A[i*N_per_PE] });

const y_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> y[i] });

// Precompute DSDs for each column of A
// var A_dsds: [N_per_PE]mem1d_dsd;
const A_dsd_0 = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> A[i] });
const A_dsd_1 = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> A[i + 1*M] });
const A_dsd_2 = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> A[i + 2*M] });

// ptrs to A, x, b, y will be advertised as symbols to host
var A_ptr: [*]f16 = &A;
var x_ptr: [*]f16 = &x;
var y_ptr: [*]f16 = &y;



var x_0: f16;
var x_1: f16;
var x_2: f16;

var test_x: [M]f16;
const test_x_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> test_x[i] });


const y_dest_dsr = @get_dsr(dsr_dest, 5);
const y_src0_dsr = @get_dsr(dsr_src0, 5);
const A_dsd_0_src1_dsr = @get_dsr(dsr_src1, 7);
const A_dsd_1_src1_dsr = @get_dsr(dsr_src1, 8);
const A_dsd_2_src1_dsr = @get_dsr(dsr_src1, 9);
const test_x_dsr = @get_dsr(dsr_src1, 10);

fn init_x() void {
  x_0 =x[0];
  x_1 =x[1];
  x_2 =x[2];

  for (@range(i16, M)) |i| {
    test_x[i] = i;
  }
}

// fn init_A_dsds() void {
//   // for (@range(i16, N_per_PE)) |i| {
//   //   A_dsds[i] = @get_dsd(mem1d_dsd, .{ .tensor_access = |j|{M} -> A[j*N_per_PE + i] });
//   // }
//   // pe_program.csl:46:82: error: invalid use of non-loop variable in affine expression
//   //   A_dsds[i] = @get_dsd(mem1d_dsd, .{ .tensor_access = |j|{M} -> A[j*N_per_PE + i] });

//   A_dsds[0] = @get_dsd(mem1d_dsd, .{ .tensor_access = |j|{M} -> A[j*N_per_PE] });
//   A_dsds[1] = @get_dsd(mem1d_dsd, .{ .tensor_access = |j|{M} -> A[j*N_per_PE + 1] });
//   A_dsds[2] = @get_dsd(mem1d_dsd, .{ .tensor_access = |j|{M} -> A[j*N_per_PE + 2] });
// }

fn gemv() void {
  // for (@range(i16, N_per_PE)) |i| {
  //   @fmach(y_dsd, y_dsd, A_dsds[i], x[i]);
  // }
  // @fmach(y_dsd, y_dsd, A_dsd_0, x_0);
  // @fmach(y_dsd, y_dsd, A_dsd_1, x_1);
  // @fmach(y_dsd, y_dsd, A_dsd_2, x_2);

  // @fmach(y_dest_dsr, y_src0_dsr, A_dsd_0_src1_dsr, x_0);
  // @fmach(y_dest_dsr, y_src0_dsr, A_dsd_1_src1_dsr, x_1);
  // @fmach(y_dest_dsr, y_src0_dsr, A_dsd_2_src1_dsr, x_2);

  @fmach(y_dest_dsr, y_src0_dsr, A_dsd_0_src1_dsr, test_x_dsr);
  @fmach(y_dest_dsr, y_src0_dsr, A_dsd_1_src1_dsr, test_x_dsr);
  @fmach(y_dest_dsr, y_src0_dsr, A_dsd_2_src1_dsr, test_x_dsr);
}

fn send_right() void {
  const out_dsd = @get_dsd(fabout_dsd, .{
                    .fabric_color = send_color, .extent = M,
                    .output_queue = send_color_oq
                  });
  // After fmovs is done, activate exit_task to unblock cmd_stream
  @fmovh(out_dsd, y_dsd, .{ .async = true, .activate = exit_task_id });
}

fn recv_left() void {
  const in_dsd = @get_dsd(fabin_dsd, .{
                   .fabric_color = send_color, .extent = M,
                   .input_queue = send_color_iq
                 });
  // After fadds is done, activate exit_task to unblock cmd stream
  @faddh(y_dsd, y_dsd, in_dsd, .{ .async = true, .activate = exit_task_id });
}

// Call gemv function and send/ receive partial result y
fn compute() void {
  // init_A_dsds();
  init_x();
  gemv();
  if (pe_id == 0) {
    send_right();
  } else {
    recv_left();
  }
}

task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {

  @load_to_dsr(y_dest_dsr, y_dsd);
  @load_to_dsr(y_src0_dsr, y_dsd);
  @load_to_dsr(A_dsd_0_src1_dsr, A_dsd_0);
  @load_to_dsr(A_dsd_1_src1_dsr, A_dsd_1);
  @load_to_dsr(A_dsd_2_src1_dsr, A_dsd_2);
  @load_to_dsr(test_x_dsr, test_x_dsd);

  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    @initialize_queue(send_color_oq, .{ .color = send_color });
    @initialize_queue(send_color_iq, .{ .color = send_color });
  }

  @export_symbol(A_ptr, "A");
  @export_symbol(x_ptr, "x");
  @export_symbol(y_ptr, "y");
  @export_symbol(compute);
}