// matrix dimensions on each PE
param w: i16;
param h: i16;
param steps: i16;

const rank: i16 = 1;

// Colors
const send_e_col: color = @get_color(1); // Color used to send data to the right
// const send_w_col: color = @get_color(3); // Color used to send data to the left
// const send_n_col: color = @get_color(5); // Color used to send data to the top
// const send_s_col: color = @get_color(7); // Color used to send data to the bottom

// const recv_e_col: color = @get_color(0); // Color used to receive data from the right
const recv_w_col: color = @get_color(2); // Color used to receive data from the left
// const recv_n_col: color = @get_color(4); // Color used to receive data from the top
// const recv_s_col: color = @get_color(6); // Color used to receive data from the bottom


const memcpy = @import_module("<memcpy/get_params>", .{
  .width = w,
  .height = h,
});

layout {
  // PE coordinates are (column, row)
  @set_rectangle(w, h);

  for (@range(i16, w)) |col| {
    for (@range(i16, h)) |row| {

      const is_static_region: bool = col<rank or row<rank or col>=w-rank or row>=h-rank;

      // vertical stripes pattern
      if(col%2 == 0){
        @set_tile_code(col, row, "pe_program.csl", .{
          .memcpy_params = memcpy.get_params(col),
          .is_static_region = is_static_region,
          .send_e_col = send_e_col,
          // .send_w_col = send_w_col,
          // .send_n_col = send_n_col,
          // .send_s_col = send_s_col,
          // .recv_e_col = recv_e_col,
          .recv_w_col = recv_w_col,
          // .recv_n_col = recv_n_col,
          // .recv_s_col = recv_s_col,
          .steps = steps,
        });

        @set_color_config(col, row, send_e_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST} }});
        // @set_color_config(col, row, send_w_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{WEST} }});
        // @set_color_config(col, row, send_n_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{NORTH} }});
        // @set_color_config(col, row, send_s_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} }});

        // @set_color_config(col, row, recv_e_col, .{.routes = .{ .rx = .{EAST}, .tx = .{RAMP} }});
        @set_color_config(col, row, recv_w_col, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP} }});
        // @set_color_config(col, row, recv_n_col, .{.routes = .{ .rx = .{NORTH}, .tx = .{RAMP} }});
        // @set_color_config(col, row, recv_s_col, .{.routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} }});
      }else{
          @set_tile_code(col, row, "pe_program.csl", .{
          .memcpy_params = memcpy.get_params(col),
          .is_static_region = is_static_region,
          .send_e_col = recv_e_col,
          // .send_w_col = recv_w_col,
          // .send_n_col = recv_n_col,
          // .send_s_col = recv_s_col,
          // .recv_e_col = send_e_col,
          .recv_w_col = send_w_col,
          // .recv_n_col = send_n_col,
          // .recv_s_col = send_s_col,
          .steps = steps,
        });

        @set_color_config(col, row, send_e_col, .{.routes = .{ .rx = .{EAST}, .tx = .{RAMP} }});
        // @set_color_config(col, row, send_w_col, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP} }});
        // @set_color_config(col, row, send_n_col, .{.routes = .{ .rx = .{NORTH}, .tx = .{RAMP} }});
        // @set_color_config(col, row, send_s_col, .{.routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} }});

        // @set_color_config(col, row, recv_e_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST} }});
        @set_color_config(col, row, recv_w_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{WEST} }});
        // @set_color_config(col, row, recv_n_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{NORTH} }});
        // @set_color_config(col, row, recv_s_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} }});
      }
    }
  }

  // export symbol names
  @export_name("matrix", [*]f32, true);
  @export_name("compute", fn()void);
}