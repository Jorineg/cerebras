param memcpy_params: comptime_struct;
param is_static_region: bool;
param steps: i16;

param send_e_col: color;
// param send_w_col: color;
// param send_n_col: color;
// param send_s_col: color;

// param recv_e_col: color;
param recv_w_col: color;
// param recv_n_col: color;
// param recv_s_col: color;

// Queue IDs
const send_color_oq_e = @get_output_queue(2);  // 0 is reserved
// const send_color_oq_w = @get_output_queue(1);
// const send_color_oq_n = @get_output_queue(3);
// const send_color_oq_s = @get_output_queue(4);

// const recv_color_iq_e = @get_input_queue(3);  // 0 and 1 are reserved
const recv_color_iq_w = @get_input_queue(2);
// const recv_color_iq_n = @get_input_queue(4);
// const recv_color_iq_s = @get_input_queue(5);

// Task ID used by a local task to unblock cmd stream
const exit_task_id: local_task_id = @get_local_task_id(9);

// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

const rank: i16 = 1;
var weights = [rank+1]f32 {1.0, 0.5};

var matrix: [1]f32 = [1]f32 {0.0};
var matrix_ptr: [*]f32 = &matrix;

// DSDs for accessing weights and matrix
const weights_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{rank+1} -> weights[i+1] });
const matrix_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> matrix[0] });

const send_dsd_e = @get_dsd(fabout_dsd, .{ .fabric_color = send_e_col, .extent = 1, .output_queue = send_color_oq_e});
// const send_dsd_w = @get_dsd(fabout_dsd, .{ .fabric_color = send_w_col, .extent = 1, .output_queue = send_color_oq_w});
// const send_dsd_n = @get_dsd(fabout_dsd, .{ .fabric_color = send_n_col, .extent = 1, .output_queue = send_color_oq_n});
// const send_dsd_s = @get_dsd(fabout_dsd, .{ .fabric_color = send_s_col, .extent = 1, .output_queue = send_color_oq_s});

// const recv_dsd_e = @get_dsd(fabin_dsd, .{ .fabric_color = recv_e_col, .extent = 1, .input_queue = recv_color_iq_e});
const recv_dsd_w = @get_dsd(fabin_dsd, .{ .fabric_color = recv_w_col, .extent = 1, .input_queue = recv_color_iq_w});
// const recv_dsd_n = @get_dsd(fabin_dsd, .{ .fabric_color = recv_n_col, .extent = 1, .input_queue = recv_color_iq_n});
// const recv_dsd_s = @get_dsd(fabin_dsd, .{ .fabric_color = recv_s_col, .extent = 1, .input_queue = recv_color_iq_s});

// function that initializes weights
// divide weights to not have to divide in the loop
// first weight is for center element, others are for neighbors
// so that sum of w[0] + 4*w[1] + 4*w[2] + ... + 4*w[rank] = 1
fn init_weights() void {
  var sum: f32 = 0.0;
  for (@range(i16, rank+1)) |i| {
    sum += if (i == 0) weights[i] else 4.0*weights[i];
  }
  for (@range(i16, rank+1)) |i| {
    weights[i] /= sum;
  }
}


// option 1: move everything to ram, then do the computation.
// Can use simd instructions and have same multiplier for different colors
// uses only 4 dsds

// option 2: have one dsd for every element to receive, perform computation while receiving
// there are enough (44 or 48) dsrs that coulb be assignend in advance

// option 3: can we "reset" a fabin dsd to use it again? 


// option 2:
fn step(exit: bool) void {
  // add own value to result

  // @fmacs(matrix_dsd, matrix_dsd, matrix_dsd, weights[0], .{ .async = true });
  @fmacs(matrix_dsd, matrix_dsd, matrix_dsd, weights[0]);

  // // synchroneous version
  // @fmacs(matrix_dsd, matrix_dsd, recv_dsd_e, weights[1]);
  @fmacs(matrix_dsd, matrix_dsd, recv_dsd_w, weights[1]);
  // @fmacs(matrix_dsd, matrix_dsd, recv_dsd_n, weights[1]);
  // @fmacs(matrix_dsd, matrix_dsd, recv_dsd_s, weights[1]);
  if (exit) {
    @activate(exit_task_id);
  } else {
    send_to_neighbors();
  }

  // asynchroneous version
  // @fmacs(matrix_dsd, matrix_dsd, recv_dsd_e, 1.0, .{ .async = true });
  // @fmacs(matrix_dsd, matrix_dsd, recv_dsd_w, weights[1], .{ .async = true });
  // @fmacs(matrix_dsd, matrix_dsd, recv_dsd_n, weights[1], .{ .async = true });
  // if(exit){
  //   @fmacs(matrix_dsd, matrix_dsd, recv_dsd_s, weights[1], .{ .async = true, .activate = exit_task_id });
  // }
}

fn send_to_neighbors() void {
  @fmovs(send_dsd_e, matrix_dsd);
  // @fmovs(send_dsd_w, matrix_dsd);
  // @fmovs(send_dsd_n, matrix_dsd);
  // @fmovs(send_dsd_s, matrix_dsd);
}

// Call gemv function and send/ receive partial result y
fn compute() void {
  init_weights();
  send_to_neighbors();
  if (is_static_region) {
    return;
  }
  for (@range(i16, steps)) |i| {
    step(i == steps-1);
  }
}

task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {
  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    @initialize_queue(send_color_oq_e, .{ .color = send_color_oq_e });
    // @initialize_queue(send_color_oq_w, .{ .color = send_color_oq_w });
    // @initialize_queue(send_color_oq_n, .{ .color = send_color_oq_n });
    // @initialize_queue(send_color_oq_s, .{ .color = send_color_oq_s });

    // @initialize_queue(recv_color_iq_e, .{ .color = recv_color_iq_e });
    @initialize_queue(recv_color_iq_w, .{ .color = recv_color_iq_w });
    // @initialize_queue(recv_color_iq_n, .{ .color = recv_color_iq_n });
    // @initialize_queue(recv_color_iq_s, .{ .color = recv_color_iq_s });
  }
  @export_symbol(matrix_ptr, "matrix");
  @export_symbol(compute);
}