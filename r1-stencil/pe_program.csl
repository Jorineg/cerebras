param memcpy_params: comptime_struct;
param is_static_region: bool;
param steps: i16;

param send_col: color;

param recv_e_col: color;
param recv_w_col: color;
param recv_n_col: color;
param recv_s_col: color;

param row: i16;
param col: i16;

param width: i16;
param height: i16;


const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// Queue IDs
const send_color_oq = @get_output_queue(1);  // 0 is reserved

const recv_color_iq_e = @get_input_queue(3);  // 0 and 1 are reserved
const recv_color_iq_w = @get_input_queue(2);
const recv_color_iq_n = @get_input_queue(4);
const recv_color_iq_s = @get_input_queue(5);

const is_corner = (col == 0 or col == width-1) and (row == 0 or row == height-1);

const exit_task_id: local_task_id = @get_local_task_id(9);

var weight_zero: f32 = 1.0;
var weight_one: f32 = 0.5;

var intermediate_sum_1: [1]f32;
var intermediate_sum_2: [1]f32;

var dev_null: [1]f32;

var matrix: [1]f32;
var matrix_ptr: [*]f32 = &matrix;
var pre_processed_matrix: [1]f32;


// DSDs
const matrix_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> matrix[0] });
const dev_null_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> dev_null[0] });
const pre_processed_matrix_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> pre_processed_matrix[0] });

const send_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_col, .extent = 1, .output_queue = send_color_oq });

const recv_dsd_e = @get_dsd(fabin_dsd, .{ .fabric_color = recv_e_col, .extent = 1, .input_queue = recv_color_iq_e});
const recv_dsd_w = @get_dsd(fabin_dsd, .{ .fabric_color = recv_w_col, .extent = 1, .input_queue = recv_color_iq_w});
const recv_dsd_n = @get_dsd(fabin_dsd, .{ .fabric_color = recv_n_col, .extent = 1, .input_queue = recv_color_iq_n});
const recv_dsd_s = @get_dsd(fabin_dsd, .{ .fabric_color = recv_s_col, .extent = 1, .input_queue = recv_color_iq_s});

const intermediate_sum_1_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> intermediate_sum_1[0] });
const intermediate_sum_2_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> intermediate_sum_2[0] });

// DSRs
const matrix_dsr = @get_dsr(dsr_src0, 1);
const pre_processed_matrix_dsr = @get_dsr(dsr_src1, 3);

const send_dsr = @get_dsr(dsr_dest, 1);

const recv_dsr_e = @get_dsr(dsr_src0, 8);
const recv_dsr_w = @get_dsr(dsr_src1, 9);
const recv_dsr_n = @get_dsr(dsr_src0, 10);
const recv_dsr_s = @get_dsr(dsr_src1, 11);

const intermediate_sum_1_dsr_dest = @get_dsr(dsr_dest, 8);
const intermediate_sum_2_dsr_dest = @get_dsr(dsr_dest, 10);
const intermediate_sum_1_dsr_src1 = @get_dsr(dsr_src1, 4);
const intermediate_sum_2_dsr_src1 = @get_dsr(dsr_src1, 5);

// function that initializes weights
// divide weights to not have to divide in the loop
// first weight is for center element, others are for neighbors
// so that sum of w[0] + 4*w[1] + 4*w[2] + ... + 4*w[rank] = 1
fn init_weights() void {
  var sum: f32 = weight_zero + 4.0 * weight_one;
  weight_zero /= sum;
  weight_one /= sum;
  
  pre_processed_matrix[0] = matrix[0] * weight_one;
}

fn loop() void {
  for (@range(i16, steps)) |i| {
    send_to_neighbors();
    if (!is_static_region){
      @fmuls(matrix_dsr, matrix_dsr, weight_zero);

      @fadds(intermediate_sum_1_dsr_dest, recv_dsr_e, recv_dsr_w);
      @fadds(intermediate_sum_2_dsr_dest, recv_dsr_n, recv_dsr_s);
      @fadds(matrix_dsr, matrix_dsr, intermediate_sum_1_dsr_src1);
      @fadds(matrix_dsr, matrix_dsr, intermediate_sum_2_dsr_src1);
    }else{
      border_receive_data();
    }
  }
  @activate(exit_task_id);
}


fn border_receive_data() void {
  if (col == 0) {
    @fmovs(dev_null_dsd, recv_dsd_e);
  }else if (col == width-1) {
    @fmovs(dev_null_dsd, recv_dsd_w);
  }else if (row == 0) {
    @fmovs(dev_null_dsd, recv_dsd_s);
  }else if (row == height-1) {
    @fmovs(dev_null_dsd, recv_dsd_n);
  }
}


fn send_to_neighbors() void {
  if(is_static_region){
    @fmovs(send_dsr, pre_processed_matrix_dsr);
  }else{
    @fmuls(send_dsr, matrix_dsr, weight_one);
  }
}


fn compute() void {
  init_weights();
  if (is_corner) {
    @activate(exit_task_id);
  }else{
    if(is_static_region){
      send_to_neighbors(); // send once more so that input queues are never empty
    }
    loop();
  }
}


task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {
  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);

  // load DSDs to DSRs
  @load_to_dsr(matrix_dsr, matrix_dsd);
  @load_to_dsr(pre_processed_matrix_dsr, pre_processed_matrix_dsd);
  
  @load_to_dsr(send_dsr, send_dsd);

  @load_to_dsr(recv_dsr_e, recv_dsd_e);
  @load_to_dsr(recv_dsr_w, recv_dsd_w);
  @load_to_dsr(recv_dsr_n, recv_dsd_n);
  @load_to_dsr(recv_dsr_s, recv_dsd_s);

  @load_to_dsr(intermediate_sum_1_dsr_dest, intermediate_sum_1_dsd);
  @load_to_dsr(intermediate_sum_2_dsr_dest, intermediate_sum_2_dsd);
  @load_to_dsr(intermediate_sum_1_dsr_src1, intermediate_sum_1_dsd);
  @load_to_dsr(intermediate_sum_2_dsr_src1, intermediate_sum_2_dsd);

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    @initialize_queue(send_color_oq, .{ .color = send_col });

    @initialize_queue(recv_color_iq_e, .{ .color = recv_e_col });
    @initialize_queue(recv_color_iq_w, .{ .color = recv_w_col });
    @initialize_queue(recv_color_iq_n, .{ .color = recv_n_col });
    @initialize_queue(recv_color_iq_s, .{ .color = recv_s_col });
  }else{

    // must also be initialized on WSE-2 manually if using dsrs
    // not documented !!!
    @initialize_queue(recv_color_iq_e, .{ .color = recv_e_col });
    @initialize_queue(recv_color_iq_w, .{ .color = recv_w_col });
    @initialize_queue(recv_color_iq_n, .{ .color = recv_n_col });
    @initialize_queue(recv_color_iq_s, .{ .color = recv_s_col });
  }

  @export_symbol(matrix_ptr, "matrix");
  @export_symbol(compute);
  
}