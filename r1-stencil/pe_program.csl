// 1601 - 1621 -> 20 cycles
// 1621 - 1640 -> 19 cycles
// 1640 - 1656 -> 16 cycles
// 1656 - 1673 -> 17 cycles
// 1673 - 1689 -> 16 cycles
// 1689 - 1706 -> 17 cycles
// 1706 - 1722 -> 16 cycles
// 1722 - 1739 -> 17 cycles


// sending data to neighbors: 4 cycles (1 cycle per neighbor)
// update value with own value from previous step: 3 cycle
// for each neighbor do following:
//  - update value with neighbor value (fmacs): 3 cycle




// const simprint = @import_module("<simprint>");
// const tile_config = @import_module("<tile_config>");

param memcpy_params: comptime_struct;
param is_static_region: bool;
param steps: i16;

param send_col: color;

param recv_e_col: color;
param recv_w_col: color;
param recv_n_col: color;
param recv_s_col: color;

param row: i16;
param col: i16;

param width: i16;
param height: i16;

const receive_n_to_send = if (is_static_region) 1 else 4;

// Queue IDs
const send_color_oq = @get_output_queue(1);  // 0 is reserved

const recv_color_iq_e = @get_input_queue(3);  // 0 and 1 are reserved
const recv_color_iq_w = @get_input_queue(2);
const recv_color_iq_n = @get_input_queue(4);
const recv_color_iq_s = @get_input_queue(5);

const is_corner = (col == 0 or col == width-1) and (row == 0 or row == height-1);

// Task ID used by a local task to unblock cmd stream
const exit_task_id: local_task_id = @get_local_task_id(9);

// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

const rank: i16 = 1;
var weights = [rank+1]f32 {1.0, 0.5};
const zero: [1]f32 = [1]f32 {0.0};

const weight_zero: f32 = 1.0/3.0;
const weight_one: f32 = 1.0/6.0;

var dev_null: [1]f32;

var matrix: [1]f32 = [1]f32 {0.0};
var matrix_ptr: [*]f32 = &matrix;

var steps_executed: i16 = 0;
var wait_steps: u16 = 0;

var recv_counter: i16 = 0;

// DSDs for accessing weights and matrix
const weights_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{rank+1} -> weights[i+1] });
const matrix_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> matrix[0] });
const zero_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> zero[0] });
const dev_null_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> dev_null[0] });

const send_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_col, .extent = 1, .output_queue = send_color_oq });

const recv_dsd_e = @get_dsd(fabin_dsd, .{ .fabric_color = recv_e_col, .extent = 1, .input_queue = recv_color_iq_e});
const recv_dsd_w = @get_dsd(fabin_dsd, .{ .fabric_color = recv_w_col, .extent = 1, .input_queue = recv_color_iq_w});
const recv_dsd_n = @get_dsd(fabin_dsd, .{ .fabric_color = recv_n_col, .extent = 1, .input_queue = recv_color_iq_n});
const recv_dsd_s = @get_dsd(fabin_dsd, .{ .fabric_color = recv_s_col, .extent = 1, .input_queue = recv_color_iq_s});

// DSRs
const weights_dsr = @get_dsr(dsr_src1, 0);
const matrix_dsr = @get_dsr(dsr_src0, 1);
const matrix_dsr_src = @get_dsr(dsr_src1, 2);
const matrix_dsr_dest = @get_dsr(dsr_dest, 7);
const dev_null_dsr = @get_dsr(dsr_dest, 12);


const send_dsr = @get_dsr(dsr_dest, 3);

const recv_dsr_e = @get_dsr(dsr_src1, 8);
const recv_dsr_w = @get_dsr(dsr_src1, 9);
const recv_dsr_n = @get_dsr(dsr_src1, 10);
const recv_dsr_s = @get_dsr(dsr_src1, 11);


// function that initializes weights
// divide weights to not have to divide in the loop
// first weight is for center element, others are for neighbors
// so that sum of w[0] + 4*w[1] + 4*w[2] + ... + 4*w[rank] = 1
fn init_weights() void {
  var sum: f32 = 0.0;
  for (@range(i16, rank+1)) |i| {
    sum += if (i == 0) weights[i] else 4.0*weights[i];
  }
  for (@range(i16, rank+1)) |i| {
    weights[i] /= sum;
  }
}

fn loop() void {
  // synchronized version
  for (@range(i16, steps)) |i| {
    send_to_neighbors();
    if (!is_static_region){
    // add own value to result
      @fmuls(matrix_dsr, matrix_dsr, weight_zero);
      @fmacs(matrix_dsr, matrix_dsr, recv_dsr_e, weight_one);
      @fmacs(matrix_dsr, matrix_dsr, recv_dsr_w, weight_one);
      @fmacs(matrix_dsr, matrix_dsr, recv_dsr_n, weight_one);
      @fmacs(matrix_dsr, matrix_dsr, recv_dsr_s, weight_one);
    }else{
      // receive and delete data
      border_receive_data();
    }
  }

  @activate(exit_task_id);
}


fn border_receive_data() void {
  if (col == 0) {
    @fmovs(dev_null_dsd, recv_dsd_e);
  }else if (col == width-1) {
    @fmovs(dev_null_dsd, recv_dsd_w);
  }else if (row == 0) {
    @fmovs(dev_null_dsd, recv_dsd_s);
  }else if (row == height-1) {
    @fmovs(dev_null_dsd, recv_dsd_n);
  }
}



fn send_to_neighbors() void {
  @fmovs(send_dsr, matrix_dsr_src);
}

// Call gemv function and send/ receive partial result y
fn compute() void {
  init_weights();
  if (is_corner) {
    @activate(exit_task_id);
  }else{
    loop();
  }
}


task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {
  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);

  // load DSDs to DSRs
  @load_to_dsr(weights_dsr, weights_dsd);
  @load_to_dsr(matrix_dsr, matrix_dsd);
  @load_to_dsr(matrix_dsr_src, matrix_dsd);
  @load_to_dsr(matrix_dsr_dest, matrix_dsd);
  @load_to_dsr(dev_null_dsr, dev_null_dsd);
  
  @load_to_dsr(send_dsr, send_dsd);

  @load_to_dsr(recv_dsr_e, recv_dsd_e);
  @load_to_dsr(recv_dsr_w, recv_dsd_w);
  @load_to_dsr(recv_dsr_n, recv_dsd_n);
  @load_to_dsr(recv_dsr_s, recv_dsd_s);

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    @initialize_queue(send_color_oq, .{ .color = send_col });

    @initialize_queue(recv_color_iq_e, .{ .color = recv_e_col });
    @initialize_queue(recv_color_iq_w, .{ .color = recv_w_col });
    @initialize_queue(recv_color_iq_n, .{ .color = recv_n_col });
    @initialize_queue(recv_color_iq_s, .{ .color = recv_s_col });
  }else{

    // must also be initialized on WSE-2 manually if using dsrs
    // not documented !!!
    @initialize_queue(recv_color_iq_e, .{ .color = recv_e_col });
    @initialize_queue(recv_color_iq_w, .{ .color = recv_w_col });
    @initialize_queue(recv_color_iq_n, .{ .color = recv_n_col });
    @initialize_queue(recv_color_iq_s, .{ .color = recv_s_col });
  }

  @export_symbol(matrix_ptr, "matrix");
  @export_symbol(compute);
}