// Task ID used by a local task to unblock cmd stream
const exit_task_id: local_task_id = @get_local_task_id(9);

// memcpy module provides infrastructure for copying data
// and launching functions from the host

param memcpy_params;
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

var value: [1]f32 = [1]f32 {0.0};
var value_ptr: [*]f32 = &value;

const size: u16 = 10;

var data:    [size]f32 = [size]f32 {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
var weights: [size]f32 = [size]f32 {2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 1.0};
var other_value: [1]f32 = [1]f32 {3.0};

const value_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> value[0] });
const data_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> data[i] });
const weights_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> weights[i] });
const other_value_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> other_value[0] });

const value_dsr_dest = @get_dsr(dsr_dest, 1);
const value_dsr_src0 = @get_dsr(dsr_src0, 2);
const value_dsr_src0_2 = @get_dsr(dsr_src0, 10);
const value_dsr_src1 = @get_dsr(dsr_src1, 3);

const data_dsr_dest = @get_dsr(dsr_dest, 4);
const data_dsr_src0 = @get_dsr(dsr_src0, 5);
const data_dsr_src1 = @get_dsr(dsr_src1, 6);

const weights_dsr_dest = @get_dsr(dsr_dest, 7); 
const weights_dsr_src0 = @get_dsr(dsr_src0, 8);
const weights_dsr_src1 = @get_dsr(dsr_src1, 9);

const other_value_dsr_src1 = @get_dsr(dsr_src1, 11);

const one: f32 = 1.1;
const two: f32 = 2.2;
const three: f32 = 3.3;
const four: f32 = 4.4;
const five: f32 = 5.5;

// DSDs for accessing weights and matrix
// const weights_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{rank+1} -> weights[i] });
// const matrix_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> matrix[0] });
// const send_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_col, .extent = 1, .output_queue = send_color_oq });


// Call gemv function and send/ receive partial result y
fn start() void {
  // for (@range(i16, steps)) |i| {
  //   step(i == steps-1);
  //   init_dsds(); // need to reinitialize dsds every iteration
  // }

  // @fmacs(value_dsr_src0, value_dsr_src0, other_value_dsr_src1, 1.1);
  // @fmacs(value_dsr_src0, value_dsr_src0, other_value_dsr_src1, 1.1);
  // @fmacs(value_dsr_src0, value_dsr_src0, other_value_dsr_src1, 1.1);
  // @fmacs(value_dsr_src0, value_dsr_src0, other_value_dsr_src1, 1.1);
  // @fmacs(value_dsr_src0, value_dsr_src0, other_value_dsr_src1, 1.1);


  @fadds(value_dsr_src0, value_dsr_src0, 1.1);
  @fadds(data_dsr_src0, data_dsr_src0, 1.1);
  @fadds(weights_dsr_src0, weights_dsr_src0, 1.1);
  // @fadds(other, value_dsr_src0, 1.1);



  @activate(exit_task_id);
}

task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {
  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);

  @load_to_dsr(value_dsr_dest, value_dsd);
  @load_to_dsr(value_dsr_src0, value_dsd);
  @load_to_dsr(value_dsr_src0_2, value_dsd);
  @load_to_dsr(value_dsr_src1, value_dsd);

  @load_to_dsr(data_dsr_dest, data_dsd);
  @load_to_dsr(data_dsr_src0, data_dsd);
  @load_to_dsr(data_dsr_src1, data_dsd);

  @load_to_dsr(weights_dsr_dest, weights_dsd);
  @load_to_dsr(weights_dsr_src0, weights_dsd);
  @load_to_dsr(weights_dsr_src1, weights_dsd);

  @load_to_dsr(other_value_dsr_src1, other_value_dsd);


  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
  }

  @export_symbol(value_ptr, "value");
  @export_symbol(start);
}