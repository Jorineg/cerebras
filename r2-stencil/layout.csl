// matrix dimensions on each PE
param w: i16;
param h: i16;
param steps: i16;

const rank: i16 = 1;

const memcpy = @import_module("<memcpy/get_params>", .{
  .width = w,
  .height = h,
});


fn get_color(col: i16, row: i16) i16 {
  return ((col + ((row/3) % 2)) % 5) + (row % 3)*5;
}

layout {
  // Colors
  var cols: [15]color = @constants([15]color, @get_color(0));

  for (@range(i16, 15)) |i| {
    cols[i] = @get_color(i+1);
  }


  // PE coordinates are (column, row)
  @set_rectangle(w, h);

  for (@range(i16, w)) |col| {
    for (@range(i16, h)) |row| {

      const is_static_region: bool = col<rank or row<rank or col>=w-rank or row>=h-rank;

      const send_col = cols[get_color(col, row)];
      const recv_e_col_1 = cols[get_color(col+1, row)];
      const recv_w_col_1 = cols[get_color(col+4, row)];
      const recv_n_col_1 = cols[get_color(col, row+5)];
      const recv_s_col_1 = cols[get_color(col, row+1)];

      const recv_e_col_2 = cols[get_color(col+2, row)];
      const recv_w_col_2 = cols[get_color(col+3, row)];
      const recv_n_col_2 = cols[get_color(col, row+4)];
      const recv_s_col_2 = cols[get_color(col, row+2)];


      @set_tile_code(col, row, "pe_program.csl", .{
        .memcpy_params = memcpy.get_params(col),
        .is_static_region = is_static_region,
        .send_col = send_col,
        .recv_e_col_1 = recv_e_col_1,
        .recv_w_col_1 = recv_w_col_1,
        .recv_n_col_1 = recv_n_col_1,
        .recv_s_col_1 = recv_s_col_1,
        .recv_e_col_2 = recv_e_col_2,
        .recv_w_col_2 = recv_w_col_2,
        .recv_n_col_2 = recv_n_col_2,
        .recv_s_col_2 = recv_s_col_2,
        .steps = steps,
        .row = row,
        .col = col,
        .width = w,
        .height = h,
      });

      // send color
      // do not send across the edge
      if (col == 0) {
        @set_color_config(col, row, send_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST} }});
      } else if (col == w-1) {
        @set_color_config(col, row, send_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{WEST} }});
      } else if (row == 0) {
        @set_color_config(col, row, send_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} }});
      } else if (row == h-1) {
        @set_color_config(col, row, send_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{NORTH} }});
      } else {
        @set_color_config(col, row, send_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST, WEST, NORTH, SOUTH} }});
      }

      // forward and receive colors
      // do not forward if at the edge
      if (col == 0) {
        @set_color_config(col, row, recv_e_col_1, .{.routes = .{ .rx = .{EAST}, .tx = .{RAMP} }});
      }else {
        @set_color_config(col, row, recv_e_col_1, .{.routes = .{ .rx = .{EAST}, .tx = .{RAMP, WEST} }});
      }

      if (col == w-1) {
        @set_color_config(col, row, recv_w_col_1, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP} }});
      }else {
        @set_color_config(col, row, recv_w_col_1, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP, EAST} }});
      }

      if (row == h-1) {
        @set_color_config(col, row, recv_n_col_1, .{.routes = .{ .rx = .{NORTH}, .tx = .{RAMP} }});
      }else {
        @set_color_config(col, row, recv_n_col_1, .{.routes = .{ .rx = .{NORTH}, .tx = .{RAMP, SOUTH} }});
      }

      if (row == 0) {
        @set_color_config(col, row, recv_s_col_1, .{.routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} }});
      }else {
        @set_color_config(col, row, recv_s_col_1, .{.routes = .{ .rx = .{SOUTH}, .tx = .{RAMP, NORTH} }});
      }

      // receive colors
      @set_color_config(col, row, recv_e_col_2, .{.routes = .{ .rx = .{EAST}, .tx = .{RAMP} }});
      @set_color_config(col, row, recv_w_col_2, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP} }});
      @set_color_config(col, row, recv_n_col_2, .{.routes = .{ .rx = .{NORTH}, .tx = .{RAMP} }});
      @set_color_config(col, row, recv_s_col_2, .{.routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} }});
    }
  }

  // export symbol names
  @export_name("matrix", [*]f32, true);
  @export_name("compute", fn()void);
}