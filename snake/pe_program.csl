param memcpy_params: comptime_struct;

// ID of PE (0 is left, 1 is right)
param pe_id: i16;
param length: i16;

// Colors
param send_color: color;
param recv_color: color;

// Queue IDs
const send_color_oq = @get_output_queue(2);
const recv_color_iq = @get_input_queue(2);

// Task ID used by a local task to unblock cmd stream
const exit_task_id: local_task_id = @get_local_task_id(9);


// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);


var one: [11]f16 = [11]f16 {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
const one_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{10} -> one[i+1] });

var value: [10]f16 = [10]f16 {0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0};
const value_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{10} -> value[i] });

const value_ptr: [*]f16 = &value;

fn send_right() void {
  const out_dsd = @get_dsd(fabout_dsd, .{
                    .fabric_color = send_color, .extent = 10,
                    .output_queue = send_color_oq,
                    .simd_mode = .{.simd_32 = true},
                  });
  // After fmovs is done, activate exit_task to unblock cmd_stream
  @fmovh(out_dsd, value_dsd, .{ .async = true, .activate = exit_task_id, .priority = .{.high = true} });
}

// receive, add to own value, and forward
fn add_and_forward() void {
  const in_dsd = @get_dsd(fabin_dsd, .{
                    .fabric_color = recv_color, .extent = 10,
                    .input_queue = recv_color_iq,
                    .simd_mode = .{.simd_32 = true},
                  });
  const out_dsd = @get_dsd(fabout_dsd, .{
                    .fabric_color = send_color, .extent = 10,
                    .output_queue = send_color_oq,
                    .simd_mode = .{.simd_32 = true},
                  });
  @faddh(out_dsd, in_dsd, one_dsd, .{ .async = true, .activate = exit_task_id, .priority = .{.high = true} });
}

// receive, store in value, and exit
fn recv_left() void {
  const in_dsd = @get_dsd(fabin_dsd, .{
                    .fabric_color = recv_color, .extent = 10,
                    .input_queue = recv_color_iq,
                    .simd_mode = .{.simd_32 = true},
                  });
  @fmovh(value_dsd, in_dsd, .{ .async = true, .activate = exit_task_id, .priority = .{.high = true} });
}

// Call gemv function and send/ receive partial result y
fn start() void {
  if (pe_id == 0) {
    send_right();
  } else if (pe_id < length - 1) {
    add_and_forward();
  } else {
    recv_left();
  }
}

task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {
  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    @initialize_queue(send_color_oq, .{ .color = send_color });
    @initialize_queue(recv_color_iq, .{ .color = recv_color });
  }

  @export_symbol(value_ptr, "value");
  @export_symbol(start);
}