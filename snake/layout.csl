// matrix dimensions on each PE
param length: i16;
// Colors
const col_1: color = @get_color(0); // Color used to send/recv data between PEs
const col_2: color = @get_color(1); // Color used to send/recv data between PEs

// This example only uses 2 PEs
const memcpy = @import_module("<memcpy/get_params>", .{
  .width = length,
  .height = 1,
});

layout {
  // PE coordinates are (column, row)
  @set_rectangle(length, 1);

  // Left PE (0, 0)
  for (@range(i16, length)) |i| {

    if(i%2==0){
      @set_tile_code(i, 0, "pe_program.csl", .{
        .memcpy_params = memcpy.get_params(i),
        .length = length,
        .pe_id = i,
        .send_color = col_1,
        .recv_color = col_2,
      });

      @set_color_config(i, 0, col_1, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST} }});
      @set_color_config(i, 0, col_2, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP} }});
    }else{
      @set_tile_code(i, 0, "pe_program.csl", .{
        .memcpy_params = memcpy.get_params(i),
        .length = length,
        .pe_id = i,
        .send_color = col_2,
        .recv_color = col_1,
      });

      @set_color_config(i, 0, col_2, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST} }});
      @set_color_config(i, 0, col_1, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP} }});
    }
  }

  // export symbol names
  @export_name("value", [*]f16, false);
  @export_name("start", fn()void);
}