param w: i16;             // width of underlying grid
param h: i16;             // height of underlying grid
param x_tile_size: i16;   // width of each tile in x direction
param y_tile_size: i16;   // height of each tile in y direction
param rank: i16;          // rank of the stencil
param steps: i16;         // number of steps to run the stencil

// rank must be smaller or equal to the min(x_tile_size, y_tile_size)
// acutal number of PEs is given by w/x_tile_size * h/y_tile_size
// w must be a multiple of x_tile_size and h must be a multiple of y_tile_size

const num_pe_x = w / x_tile_size;
const num_pe_y = h / y_tile_size;

// Colors
const e_to_w_col_1: color = @get_color(1);
const e_to_w_col_2: color = @get_color(2);
const w_to_e_col_1: color = @get_color(3);
const w_to_e_col_2: color = @get_color(4);
const n_to_s_col_1: color = @get_color(5);
const n_to_s_col_2: color = @get_color(6);
const s_to_n_col_1: color = @get_color(7);
const s_to_n_col_2: color = @get_color(8);


const memcpy = @import_module("<memcpy/get_params>", .{
  .width = num_pe_x,
  .height = num_pe_y,
});

fn validate_parameters() void {
  @comptime_assert(w % x_tile_size == 0, "w must be a multiple of x_tile_size");
  @comptime_assert(h % y_tile_size == 0, "h must be a multiple of y_tile_size");
  @comptime_assert(rank <= x_tile_size, "rank must be smaller or equal to x_tile_size");
  @comptime_assert(rank <= y_tile_size, "rank must be smaller or equal to y_tile_size");
}

layout {
  validate_parameters();

  // PE coordinates are (column, row)
  @set_rectangle(num_pe_x, num_pe_y);

  for (@range(i16, num_pe_x)) |col| {
    for (@range(i16, num_pe_y)) |row| {
      const is_static_region: bool = col<1 or row<1 or col>=num_pe_x-1 or row>=num_pe_y-1;

      var basic_params = .{
        .memcpy_params = memcpy.get_params(col),
        .is_border = is_static_region,
        .steps = steps,
        .row = row,
        .col = col,
        .pe_width = num_pe_x,
        .pe_height = num_pe_y,
        .rank = rank,
        .x_tile_size = x_tile_size,
        .y_tile_size = y_tile_size,
      };

      var color_params;

      // checkerboard pattern
      if(col%2 == row%2){
        color_params = .{
          .send_e_col = w_to_e_col_1,
          .send_w_col = e_to_w_col_1,
          .send_n_col = s_to_n_col_1,
          .send_s_col = n_to_s_col_1,
          .recv_e_col = e_to_w_col_2,
          .recv_w_col = w_to_e_col_2,
          .recv_n_col = n_to_s_col_2,
          .recv_s_col = s_to_n_col_2,
        };

        @set_color_config(col, row, e_to_w_col_1, .{.routes = .{ .rx = .{EAST}, .tx = .{RAMP} }});
        @set_color_config(col, row, w_to_e_col_1, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP} }});
        @set_color_config(col, row, n_to_s_col_1, .{.routes = .{ .rx = .{NORTH}, .tx = .{RAMP} }});
        @set_color_config(col, row, s_to_n_col_1, .{.routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} }});

        @set_color_config(col, row, e_to_w_col_2, .{.routes = .{ .rx = .{RAMP}, .tx = .{WEST} }});
        @set_color_config(col, row, w_to_e_col_2, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST} }});
        @set_color_config(col, row, n_to_s_col_2, .{.routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} }});
        @set_color_config(col, row, s_to_n_col_2, .{.routes = .{ .rx = .{RAMP}, .tx = .{NORTH} }});

      }else{
        color_params = .{
          .send_e_col = e_to_w_col_1,
          .send_w_col = w_to_e_col_1,
          .send_n_col = n_to_s_col_1,
          .send_s_col = s_to_n_col_1,
          .recv_e_col = w_to_e_col_2,
          .recv_w_col = e_to_w_col_2,
          .recv_n_col = s_to_n_col_2,
          .recv_s_col = n_to_s_col_2,
        };

        @set_color_config(col, row, e_to_w_col_1, .{.routes = .{ .rx = .{RAMP}, .tx = .{WEST} }});
        @set_color_config(col, row, w_to_e_col_1, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST} }});
        @set_color_config(col, row, n_to_s_col_1, .{.routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} }});
        @set_color_config(col, row, s_to_n_col_1, .{.routes = .{ .rx = .{RAMP}, .tx = .{NORTH} }});

        @set_color_config(col, row, e_to_w_col_2, .{.routes = .{ .rx = .{EAST}, .tx = .{RAMP} }});
        @set_color_config(col, row, w_to_e_col_2, .{.routes = .{ .rx = .{WEST}, .tx = .{RAMP} }});
        @set_color_config(col, row, n_to_s_col_2, .{.routes = .{ .rx = .{NORTH}, .tx = .{RAMP} }});
        @set_color_config(col, row, s_to_n_col_2, .{.routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} }});
      }

      var params = @concat_structs(basic_params, color_params);
      @set_tile_code(col, row, "pe_program.csl", params);
    }
  }

  // export symbol names
  @export_name("matrix", [*]f32, true);
  @export_name("compute", fn()void);
}