Stencils pseudo code


// params
rank: int              // rank i.e. distance of neighbours. Direct neighbours -> rank 1
params: float[rank+1]  // multiplication factors for values per distance
tile_width: int        // how many values in x direction per PE
tile_height: int       // how many values in y direction per PE
num_iterations: int    // number of iterations on hole grid in the simulation

// vars
own_values: float[tile_width][tile_height]
buffer: float[tile_width+2*rank][tile_height+2*rank]

// constraints
rank <= tile_width
rank <= tile_height

// algorithm
// comptime
- initialize weights // Normalize weights W so W0 + 4*W1 + ... + 4*Wk = 1

// runtime
for iter in 1..num_iterations:
	- copy own_values to buffer (center only, leave boder values unchanged)
	- multiply own_values with params[0]
	- send cropped buffer to all 4 neighbours
		- up: buffer[rank:-rank][rank:2*rank]
		- down: buffer[rank:-rank][-2*rank:-rank]
		- left: buffer[rank:2*rank][rank:-rank]
		- right size: [-2*rank:-rank][rank:-rank]
	- receive data from all directions and store in buffer
		- from up: buffer[rank:-rank][:rank]
		- from down: buffer[rank:-rank][-rank:]
		- from left: buffer[0:rank][rank:-rank]
		- from right: buffer[-rank:][rank:-rank]
	for i in 1..rank:
	  - multiply buffer by params[i]/params[i-1] if i > 1 else params[1]
	  - add buffer shifted up/down/left/right by i to own_values
	  (- fuse above as fmacs)
