Stencils pseudo code


// params
radius: int              // radius i.e. distance of neighbours. Direct neighbours -> radius 1
params: float[radius+1]  // multiplication factors for values per distance
tile_width: int        // how many values in x direction per PE
tile_height: int       // how many values in y direction per PE
num_iterations: int    // number of iterations on hole grid in the simulation

// vars
own_values: float[tile_width][tile_height]
buffer: float[tile_width+2*radius][tile_height+2*radius]

// constraints
radius <= tile_width
radius <= tile_height

// algorithm
// comptime
- initialize weights // Normalize weights W so W0 + 4*W1 + ... + 4*Wk = 1

// runtime
for iter in 1..num_iterations:
	- copy own_values to buffer (center only, leave boder values unchanged)
	- multiply own_values with params[0]
	- send cropped buffer to all 4 neighbours
		- up: buffer[radius:-radius][radius:2*radius]
		- down: buffer[radius:-radius][-2*radius:-radius]
		- left: buffer[radius:2*radius][radius:-radius]
		- right size: [-2*radius:-radius][radius:-radius]
	- receive data from all directions and store in buffer
		- from up: buffer[radius:-radius][:radius]
		- from down: buffer[radius:-radius][-radius:]
		- from left: buffer[0:radius][radius:-radius]
		- from right: buffer[-radius:][radius:-radius]
	for i in 1..radius:
	  - multiply buffer by params[i]/params[i-1] if i > 1 else params[1]
	  - add buffer shifted up/down/left/right by i to own_values
	  (- fuse above as fmacs)
