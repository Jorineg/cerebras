// cycle count evaluation
// 1.  3642->4133 = 
// 2.  4133->4624 = 491
// 3.  4624->5115 = 491
// 4.  5115->5606 = 491
// 5.  5606->6097 = 491


const simprint = @import_module("<simprint>");

// params
param memcpy_params: comptime_struct;
param is_border: bool;

param send_e_col: color;
param send_w_col: color;
param send_n_col: color;
param send_s_col: color;

param recv_e_col: color;
param recv_w_col: color;
param recv_n_col: color;
param recv_s_col: color;

param num_iterations: i16;
param row: i16;
param col: i16;
param pe_width: i16;
param pe_height: i16;
param radius: i16;
param tile_width: i16;
param tile_height: i16;

// consts
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// Queue IDs
const send_color_oq_e = @get_output_queue(0);  // 0 is reserved
const send_color_oq_w = @get_output_queue(1);
const send_color_oq_n = @get_output_queue(2);
const send_color_oq_s = @get_output_queue(3);

const recv_color_iq_e = @get_input_queue(4);  // 0 and 1 are reserved
const recv_color_iq_w = @get_input_queue(5);
const recv_color_iq_n = @get_input_queue(6);
const recv_color_iq_s = @get_input_queue(7);

const is_corner = (col == 0 or col == pe_width-1) and (row == 0 or row == pe_height-1);
const exit_task_id: local_task_id = @get_local_task_id(9);
const receive_east_task_id: local_task_id = @get_local_task_id(10);
const receive_west_task_id: local_task_id = @get_local_task_id(11);
const receive_north_task_id: local_task_id = @get_local_task_id(12);
const receive_south_task_id: local_task_id = @get_local_task_id(13);
const send_west_task_id: local_task_id = @get_local_task_id(14);
const send_east_task_id: local_task_id = @get_local_task_id(15);
const send_north_task_id: local_task_id = @get_local_task_id(16);
const send_south_task_id: local_task_id = @get_local_task_id(17);

const loop_task_id: local_task_id = @get_local_task_id(18);


var receive_count: i16 = 0;
var send_count: i16 = 0;
var iteration_count: i16 = 0;
var weights: [radius+1]f32;
var own_values: [tile_height, tile_width]f32;
var buffer: [tile_height + 2*radius, tile_width + 2*radius]f32;

// pointers
var weights_ptr = &weights;
var own_values_ptr = &own_values;
var buffer_ptr = &buffer;

// mem DSDs
const all_buffer_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height + 2*radius, tile_width + 2*radius} -> buffer[i, j] });
const buffer_center_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> buffer[radius + i, radius + j] });
const own_values_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> own_values[i, j] });

const own_values_send_north_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{radius, tile_width} -> own_values[i, j] });
const own_values_send_south_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{radius, tile_width} -> own_values[tile_height - radius + i, j] });
const own_values_send_west_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, radius} -> own_values[i, j] });
const own_values_send_east_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, radius} -> own_values[i, tile_width - radius + j] });

const buffer_recv_north_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{radius, tile_width} -> buffer[i, radius + j] });
const buffer_recv_south_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{radius, tile_width} -> buffer[tile_height + radius + i, radius + j] });
const buffer_recv_west_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, radius} -> buffer[radius + i, j] });
const buffer_recv_east_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, radius} -> buffer[radius + i, tile_width + radius + j] });

// var buffer_shift_up_center_dsd_array: [radius]mem4d_dsd;
// var buffer_shift_down_center_dsd_array: [radius]mem4d_dsd;
// var buffer_shift_left_center_dsd_array: [radius]mem4d_dsd;
// var buffer_shift_right_center_dsd_array: [radius]mem4d_dsd;

const buffer_shift_center_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> buffer[radius + i, radius + j] });


// communication DSDs
const send_north_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_n_col, .extent = tile_width*radius, .output_queue = send_color_oq_n });
const send_south_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_s_col, .extent = tile_width*radius, .output_queue = send_color_oq_s });
const send_west_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_w_col, .extent = tile_height*radius, .output_queue = send_color_oq_w });
const send_east_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_e_col, .extent = tile_height*radius, .output_queue = send_color_oq_e });

const recv_north_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = recv_n_col, .extent = tile_width*radius, .input_queue = recv_color_iq_n });
const recv_south_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = recv_s_col, .extent = tile_width*radius, .input_queue = recv_color_iq_s });
const recv_west_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = recv_w_col, .extent = tile_height*radius, .input_queue = recv_color_iq_w });
const recv_east_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = recv_e_col, .extent = tile_height*radius, .input_queue = recv_color_iq_e });



// fn init_buffer_shift_dsd_arrays() void {
//   for (@range(i16, radius)) |k| {
//     var shift = k+1;
//     buffer_shift_up_center_dsd_array[k] = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> buffer[radius - shift + i, radius + j] });
//     buffer_shift_down_center_dsd_array[k] = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> buffer[radius + shift + i, radius + j] });
//     buffer_shift_left_center_dsd_array[k] = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> buffer[radius + i, radius - shift + j] });
//     buffer_shift_right_center_dsd_array[k] = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> buffer[radius + i, radius + shift + j] });
//   }
// }



// function that initializes weights
// divide weights to not have to divide in the loop
// first weight is for center element, others are for neighbors
// so that sum of w[0] + 4*w[1] + 4*w[2] + ... + 4*w[radius] = 1
fn init_weights() void {
  var sum: f32 = 0.0;
  for (@range(i16, radius+1)) |i| {
    sum += if (i == 0) weights[i] else 4.0*weights[i];
  }
  for (@range(i16, radius+1)) |i| {
    weights[i] /= sum;
  }
}


task loop_task() void {

  simprint.fmt_with_coords("loop task begin", .{});

  @block(loop_task_id);

  // copy own_values to buffer
  @fmovs(buffer_center_dsd, own_values_dsd);

  // send cropped own_values to neighbors
  send_to_neighbors();

  //receive data from all directions and store in buffer
  receive_from_neighbors();
}

fn send_task() void {
  send_count += 1;

  var max_send: i16 = 4;
  if (is_corner) {
    max_send = 2;
  } else if (is_border) {
    max_send = 3;
  }
  
  if (send_count < max_send) {
    return;
  }
  send_count = 0;
  @unblock(loop_task_id);
}

task send_west_task() void {
  send_task();
}

task send_east_task() void {
  send_task();
}

task send_north_task() void {
  send_task();
}

task send_south_task() void {
  send_task();
}

task receive_east_task() void {
  receive_task();
}

task receive_west_task() void {
  receive_task();
}

task receive_north_task() void {
  receive_task();
}

task receive_south_task() void {
  receive_task();
}

fn receive_task() void {
  receive_count += 1;
  var max_receive: i16 = 4;
  
  if (is_corner) {
    max_receive = 2;
  } else if (is_border) {
    max_receive = 3;
  }

  if (receive_count < max_receive) {
    return;
  }
  receive_count = 0;

  // if is_border is true: return
  if (!is_border) {

    // multiply own_values with weights[0]
    @fmuls(own_values_dsd, own_values_dsd, weights[0]);

    for (@range(i16, 1, radius + 1, 1)) |i| {
      // const weight: f32 = if (i == 1) weights[i] else weights[i]/weights[i-1];
      const weight: f32 = weights[i];
      
      // multiply buffer with weight
      // @fmuls(all_buffer_dsd, all_buffer_dsd, weight);

      // create shifted dsds
      var up_shift_dsd = @increment_dsd_offset(buffer_shift_center_dsd, -i*(tile_width+2*radius), f32);
      var down_shift_dsd = @increment_dsd_offset(buffer_shift_center_dsd, i*(tile_width+2*radius), f32);
      var left_shift_dsd = @increment_dsd_offset(buffer_shift_center_dsd, -i, f32);
      var right_shift_dsd = @increment_dsd_offset(buffer_shift_center_dsd, i, f32);
      
      // add shifted dsds to own_values
      // @fadds(own_values_dsd, own_values_dsd, up_shift_dsd);
      // @fadds(own_values_dsd, own_values_dsd, down_shift_dsd);
      // @fadds(own_values_dsd, own_values_dsd, left_shift_dsd);
      // @fadds(own_values_dsd, own_values_dsd, right_shift_dsd);

      // add multiple of dsd to own_values with fused multiply add
      @fmacs(own_values_dsd, own_values_dsd, up_shift_dsd, weight);
      @fmacs(own_values_dsd, own_values_dsd, down_shift_dsd, weight);
      @fmacs(own_values_dsd, own_values_dsd, left_shift_dsd, weight);
      @fmacs(own_values_dsd, own_values_dsd, right_shift_dsd, weight);
    }
  }

  iteration_count += 1;
  if (iteration_count < num_iterations) {
    @activate(loop_task_id);
  }else{
    @activate(exit_task_id);
  }
}


fn send_to_neighbors() void {
  // send west
  if(col != 0){
    @fmovs(send_west_dsd, own_values_send_west_dsd, .{.async=true, .activate=send_west_task});
  }
  //send east
  if(col != pe_width-1){
    @fmovs(send_east_dsd, own_values_send_east_dsd, .{.async= true, .activate=send_east_task});
  }
  // send north
  if(row != 0){
    @fmovs(send_north_dsd, own_values_send_north_dsd, .{.async= true, .activate=send_north_task});
  }
  // send south
  if(row != pe_height-1){
    @fmovs(send_south_dsd, own_values_send_south_dsd, .{.async= true, .activate=send_south_task});
  }
}

fn receive_from_neighbors() void {
  // receive west
  if(col != 0){
    @fmovs(buffer_recv_west_dsd, recv_west_dsd, .{.async=true, .activate=receive_west_task});
  }
  //receive east
  if(col != pe_width-1){
    @fmovs(buffer_recv_east_dsd, recv_east_dsd, .{.async=true, .activate=receive_east_task});
  }
  // receive north
  if(row != 0){
    @fmovs(buffer_recv_north_dsd, recv_north_dsd, .{.async=true, .activate=receive_north_task});
  }
  // receive south
  if(row != pe_height-1){
    @fmovs(buffer_recv_south_dsd, recv_south_dsd, .{.async=true, .activate=receive_south_task});
  }
}


fn compute() void {
  init_weights();
  // for (@range(i16, num_iterations)) |i| {
  @activate(loop_task_id);
  // }
  // @activate(exit_task_id);
}


task exit_task() void {
  simprint.fmt_with_coords("exit task begin", .{});
  sys_mod.unblock_cmd_stream();
}

comptime {
  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);
  @bind_local_task(receive_east_task, receive_east_task_id);
  @bind_local_task(receive_west_task, receive_west_task_id);
  @bind_local_task(receive_north_task, receive_north_task_id);
  @bind_local_task(receive_south_task, receive_south_task_id);

  @bind_local_task(send_west_task, send_west_task_id);
  @bind_local_task(send_east_task, send_east_task_id);
  @bind_local_task(send_north_task, send_north_task_id);
  @bind_local_task(send_south_task, send_south_task_id);

  @bind_local_task(loop_task, loop_task_id);

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    @initialize_queue(send_color_oq_e, .{ .color = send_e_col });
    @initialize_queue(send_color_oq_w, .{ .color = send_w_col });
    @initialize_queue(send_color_oq_n, .{ .color = send_n_col });
    @initialize_queue(send_color_oq_s, .{ .color = send_s_col });

    @initialize_queue(recv_color_iq_e, .{ .color = recv_e_col });
    @initialize_queue(recv_color_iq_w, .{ .color = recv_w_col });
    @initialize_queue(recv_color_iq_n, .{ .color = recv_n_col });
    @initialize_queue(recv_color_iq_s, .{ .color = recv_s_col });
  }else{

    // must also be initialized on WSE-2 manually if using dsrs
    // not documented !!!
    @initialize_queue(recv_color_iq_e, .{ .color = recv_e_col });
    @initialize_queue(recv_color_iq_w, .{ .color = recv_w_col });
    @initialize_queue(recv_color_iq_n, .{ .color = recv_n_col });
    @initialize_queue(recv_color_iq_s, .{ .color = recv_s_col });
  }

  @export_symbol(own_values_ptr, "values");
  @export_symbol(weights_ptr, "weights");
  @export_symbol(compute);
  @export_symbol(buffer_ptr, "buffer");
}