// params
param memcpy_params: comptime_struct;

param send_e_col: color;
param send_w_col: color;
param send_n_col: color;
param send_s_col: color;

param recv_e_col: color;
param recv_w_col: color;
param recv_n_col: color;
param recv_s_col: color;

param num_pe_x: i16;
param num_pe_y: i16;
param tile_width: i16;
param tile_height: i16;
param radius: i16;
param row: i16;
param col: i16;

param do_not_wait_for_communication_flag: bool;


// consts
// const simprint = @import_module("<simprint>");
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);
const config = @import_module("<tile_config>");
const functions = @import_module("functions.csl", .{ .radius = radius });
const consts = @import_module("consts.csl");


export const buffer_width = tile_width + 2*radius + 1; // last column is not used. only for memory alignment.
export const buffer_height = tile_height + 2*radius;
export const is_corner = (col == 0 or col == num_pe_x-1) and (row == 0 or row == num_pe_y-1);
export const is_border = col<1 or row<1 or col>=num_pe_x-1 or row>=num_pe_y-1;
const wait_for_communication = true;
const max_count: i16 = if (is_corner) 2 else if (is_border) 3 else 4;
const task_priority = config.task_priority;
const ut0 = @get_ut_id(0);


var receive_count: i16 = 0;
var send_count: i16 = 0;
var iteration_count: i32 = 0;
var num_iterations: i32;
export var weights: [radius+1]f32;
var own_values: [buffer_height, buffer_width]f32 linksection(".own_values");
var buffer: [buffer_height, buffer_width]f32 linksection(".buffer");
var weights_ptr = &weights;
var own_values_ptr = &own_values;
var buffer_ptr = &buffer;
var _var: i16 = 0;

// mem DSDs
const all_buffer_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height + 2*radius, tile_width + 2*radius} -> buffer[i, j] });
const buffer_center_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> buffer[radius + i, radius + j] });
const own_values_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, tile_width} -> own_values[radius + i, radius + j] });

const buffer_send_north_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{radius, tile_width} -> buffer[radius + i, radius + j] });
const buffer_send_south_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{radius, tile_width} -> buffer[tile_height + i, j + radius] });
const buffer_send_west_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, radius} -> buffer[i + radius, j + radius] });
const buffer_send_east_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, radius} -> buffer[i + radius, tile_width + j] });

const buffer_recv_north_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{radius, tile_width} -> buffer[i, radius + j] });
const buffer_recv_south_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{radius, tile_width} -> buffer[tile_height + radius + i, radius + j] });
const buffer_recv_west_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, radius} -> buffer[radius + i, j] });
const buffer_recv_east_dsd = @get_dsd(mem4d_dsd, .{ .tensor_access = |i, j|{tile_height, radius} -> buffer[radius + i, tile_width + radius + j] });

// communication DSDs
const send_north_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_n_col, .extent = tile_width*radius, .output_queue = consts.send_color_oq_n });
const send_south_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_s_col, .extent = tile_width*radius, .output_queue = consts.send_color_oq_s });
const send_west_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_w_col, .extent = tile_height*radius, .output_queue = consts.send_color_oq_w });
const send_east_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_e_col, .extent = tile_height*radius, .output_queue = consts.send_color_oq_e });

const recv_north_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = recv_n_col, .extent = tile_width*radius, .input_queue = consts.recv_color_iq_n });
const recv_south_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = recv_s_col, .extent = tile_width*radius, .input_queue = consts.recv_color_iq_s });
const recv_west_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = recv_w_col, .extent = tile_height*radius, .input_queue = consts.recv_color_iq_w });
const recv_east_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = recv_e_col, .extent = tile_height*radius, .input_queue = consts.recv_color_iq_e });



task loop_task() void {
  if (iteration_count >= num_iterations) {
    @activate(consts.exit_task_id);
    return;
  }

  // load_communication_dsds_to_dsrs();

  if (wait_for_communication) {
    @block(consts.compute_task_id);
  }
  
  send_to_neighbors();
  receive_from_neighbors();

  if(!wait_for_communication) {
    @activate(consts.compute_task_id);
  }

  iteration_count += 1;
}

task compute_task() void {
  if (!is_border) {

    // unroll the loop
    inline for (@range(i16, 1, radius + 1, 1)) |i| {
      var weight: f32 = weights[i];
      var up_shift_dsd = @increment_dsd_offset(buffer_center_dsd, -i*(tile_width+2*radius+1), f32);
      var down_shift_dsd = @increment_dsd_offset(buffer_center_dsd, i*(tile_width+2*radius+1), f32);
      var left_shift_dsd = @increment_dsd_offset(buffer_center_dsd, -i, f32);
      var right_shift_dsd = @increment_dsd_offset(buffer_center_dsd, i, f32);

      if(i==1){
        // overwrite own_values in first iteration
        @fmuls(own_values_dsd, up_shift_dsd, weight);
      }else{
        @fmacs(own_values_dsd, own_values_dsd, up_shift_dsd, weight);
      }
      @fmacs(own_values_dsd, own_values_dsd, down_shift_dsd, weight);
      @fmacs(own_values_dsd, own_values_dsd, left_shift_dsd, weight);
      @fmacs(own_values_dsd, own_values_dsd, right_shift_dsd, weight);
    }
    @fmacs(buffer_center_dsd, own_values_dsd, buffer_center_dsd, weights[0]);
 }
 
  @activate(consts.loop_task_id);
}

fn send_task() void {
  send_count += 1;
  if (send_count < max_count) {
    return;
  }
  send_count = 0;
  @unblock(consts.compute_task_id);
}

fn receive_task() void {
  receive_count += 1;
  if (receive_count < max_count) {
    return;
  }
  receive_count = 0;
  @activate(consts.compute_task_id);
}


fn send_to_neighbors() void {
  // send west
  if(col != 0){
    @fmovs(send_west_dsd, buffer_send_west_dsd, .{.async=true, .activate=send_west_task});
  }
  //send east
  if(col != num_pe_x-1){
    if(@is_arch("wse3")){
      @fmovs(send_east_dsd, buffer_send_east_dsd, .{.async= true, .activate=send_east_task, .ut_id=ut0});
    }else{
      @fmovs(send_east_dsd, buffer_send_east_dsd, .{.async= true, .activate=send_east_task});
    }
  }
  // send north
  if(row != 0){
    @fmovs(send_north_dsd, buffer_send_north_dsd, .{.async= true, .activate=send_north_task});
  }
  // send south
  if(row != num_pe_y-1){
    @fmovs(send_south_dsd, buffer_send_south_dsd, .{.async= true, .activate=send_south_task});
  }
}

fn receive_from_neighbors() void {
  // receive west
  if(col != 0){
    @fmovs(buffer_recv_west_dsd, recv_west_dsd, .{.async=true, .activate=receive_west_task});
  }
  //receive east
  if(col != num_pe_x-1){
    @fmovs(buffer_recv_east_dsd, recv_east_dsd, .{.async=true, .activate=receive_east_task});
  }
  // receive north
  if(row != 0){
    @fmovs(buffer_recv_north_dsd, recv_north_dsd, .{.async=true, .activate=receive_north_task});
  }
  // receive south
  if(row != num_pe_y-1){
    @fmovs(buffer_recv_south_dsd, recv_south_dsd, .{.async=true, .activate=receive_south_task});
  }
}


fn start(num_iters: i32) void {
  num_iterations = num_iters;
  functions.init_weights();
  @activate(consts.loop_task_id);
}

task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {
  task_priority.update_task_priority(consts.compute_task_id, task_priority.level.LOW);
  task_priority.update_task_priority(consts.loop_task_id, task_priority.level.LOW);

  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, consts.exit_task_id);
  @bind_local_task(receive_east_task, consts.receive_east_task_id);
  @bind_local_task(receive_west_task, consts.receive_west_task_id);
  @bind_local_task(receive_north_task, consts.receive_north_task_id);
  @bind_local_task(receive_south_task, consts.receive_south_task_id);

  @bind_local_task(send_west_task, consts.send_west_task_id);
  @bind_local_task(send_east_task, consts.send_east_task_id);
  @bind_local_task(send_north_task, consts.send_north_task_id);
  @bind_local_task(send_south_task, consts.send_south_task_id);

  @bind_local_task(loop_task, consts.loop_task_id);
  @bind_local_task(compute_task, consts.compute_task_id);

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    @initialize_queue(consts.send_color_oq_e, .{ .color = send_e_col });
    @initialize_queue(consts.send_color_oq_w, .{ .color = send_w_col });
    @initialize_queue(consts.send_color_oq_n, .{ .color = send_n_col });
    @initialize_queue(consts.send_color_oq_s, .{ .color = send_s_col });
  }
  // must also be initialized on WSE-2 manually if using dsrs
  // not documented !!!
  @initialize_queue(consts.recv_color_iq_e, .{ .color = recv_e_col });
  @initialize_queue(consts.recv_color_iq_w, .{ .color = recv_w_col });
  @initialize_queue(consts.recv_color_iq_n, .{ .color = recv_n_col });
  @initialize_queue(consts.recv_color_iq_s, .{ .color = recv_s_col });

  @export_symbol(own_values_ptr, "values");
  @export_symbol(weights_ptr, "weights");
  @export_symbol(start);
  @export_symbol(buffer_ptr, "buffer");
}


task send_east_task() void {send_task();}
task send_west_task() void {send_task();}
task send_north_task() void {send_task();}
task send_south_task() void {send_task();}

task receive_east_task() void {receive_task();}
task receive_west_task() void {receive_task();}
task receive_north_task() void {receive_task();}
task receive_south_task() void {receive_task();}