// matrix dimensions on each PE
param w: i16;
param h: i16;
param steps: i16;

const rank: i16 = 1;
const weights: [rank+1]f32 = [rank+1]f32 {1.0, 0.5};

// Colors
const send_col: color = @get_color(5); // Color used to send/recv data between PEs
const e_to_w_col: color = @get_color(6); // Color used to send/recv data between PEs
const w_to_e_col: color = @get_color(7); // Color used to send/recv data between PEs
const n_to_s_col: color = @get_color(8); // Color used to send/recv data between PEs
const s_to_n_col: color = @get_color(9); // Color used to send/recv data between PEs

// This example only uses 2 PEs
const memcpy = @import_module("<memcpy/get_params>", .{
  .width = w,
  .height = h,
});

layout {
  // PE coordinates are (column, row)
  @set_rectangle(w, h);

  for (@range(i16, w)) |col| {
    for (@range(i16, h)) |row| {

      const is_static_region: bool = col<rank or row<rank or col>=w-rank or row>=h-rank;
      const border_right: bool = col == w-rank-1;
      const border_left: bool = col == rank;
      const border_top: bool = row == rank;
      const border_bottom: bool = row == h-rank-1;

      // deactive filters for now
      // const is_static_region: bool = false
      // const border_right: bool = false;
      // const border_left: bool = false;
      // const border_top: bool = false;
      // const border_bottom: bool = false;

      @set_tile_code(col, row, "pe_program.csl", .{
        .memcpy_params = memcpy.get_params(col),
        .is_static_region = is_static_region,
        .send_col = send_col,
        .e_to_w_col = e_to_w_col,
        .w_to_e_col = w_to_e_col,
        .n_to_s_col = n_to_s_col,
        .s_to_n_col = s_to_n_col,
        .rank = rank,
        .weights = weights,
        .steps = steps,
      });

      const filter = .{.kind = .{.counter = true}, .count_data = true,
                 .limit1 = rank, .max_counter = rank-1};

      @set_color_config(col, row, send_col, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST, WEST, SOUTH, NORTH} }});

      if (is_static_region or border_right) {
        @set_color_config(col, row, e_to_w_col, .{.routes = .{ .rx = .{EAST}, .tx = .{WEST, RAMP} }});
      }else{
        @set_color_config(col, row, e_to_w_col, .{.routes = .{ .rx = .{EAST}, .tx = .{WEST, RAMP} }, .filter = filter });
      }

      if (is_static_region or border_left) {
        @set_color_config(col, row, w_to_e_col, .{.routes = .{ .rx = .{WEST}, .tx = .{EAST, RAMP} }});
      }else{
        @set_color_config(col, row, w_to_e_col, .{.routes = .{ .rx = .{WEST}, .tx = .{EAST, RAMP} }, .filter = filter });
      }

      if (is_static_region or border_top) {
        @set_color_config(col, row, n_to_s_col, .{.routes = .{ .rx = .{NORTH}, .tx = .{SOUTH, RAMP} }});
      }else{
        @set_color_config(col, row, n_to_s_col, .{.routes = .{ .rx = .{NORTH}, .tx = .{SOUTH, RAMP} }, .filter = filter });
      }

      if (is_static_region or border_bottom) {
        @set_color_config(col, row, s_to_n_col, .{.routes = .{ .rx = .{SOUTH}, .tx = .{NORTH, RAMP} }});
      }else{
        @set_color_config(col, row, s_to_n_col, .{.routes = .{ .rx = .{SOUTH}, .tx = .{NORTH, RAMP} }, .filter = filter });
      }
    }
  }

  // export symbol names
  @export_name("matrix", [*]f32, true);
  @export_name("compute", fn()void);
}